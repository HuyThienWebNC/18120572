{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","renderBoard","squares","content","i","length","row","j","push","renderSquare","this","winnerLine","includes","React","Component","Game","handleReset","setState","history","Array","fill","location","xIsNext","stepNumber","isAscending","convertToLocation","step","col","Math","trunc","handleSortToggle","state","newHistory","slice","calculateWinner","winner","concat","status","current","winInfo","moves","map","item","index","desc","classnames","jumpTo","isDraw","reverse","handleClick","line","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5b17547.chunk.js","sourcesContent":["import classnames from 'classnames';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nfunction Square(props){\r\n    const className = 'square' + (props.highlight ? ' highlight' : '');\r\n    return (\r\n        <button className={className} onClick = {props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                highlight={this.props.winnerLine && this.props.winnerLine.includes(i)}\r\n                key={i}\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n    renderBoard = (squares) => {\r\n        const content = [];\r\n        for (let i = 0; i < squares.length; i += 3) {\r\n            const row = [];\r\n            for (let j = i; j < i + 3; j++) {\r\n                row.push(this.renderSquare(j));\r\n            }\r\n            content.push(\r\n                <div key={i} className='board-row'>\r\n                    {row}\r\n                </div>\r\n            );\r\n        }\r\n        return content;\r\n    };\r\n    render() {\r\n        return <div>{this.renderBoard(this.props.squares)}</div>;\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                location: null,\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            isAscending: true,\r\n        };\r\n    }\r\n    handleClick(i) {\r\n        const newHistory = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const squares = current.squares.slice();\r\n        const { winner } = calculateWinner(squares);\r\n        if (winner || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: newHistory.concat([{\r\n                squares: squares,\r\n                step: i\r\n            }]),\r\n            stepNumber: newHistory.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n    handleReset = () => {\r\n        this.setState({\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                location: null,\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            isAscending: true,\r\n        });\r\n    };\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n    convertToLocation = (step) => {\r\n        const col = (step % 3) + 1;\r\n        const row = Math.trunc(step / 3) + 1;\r\n        return [row, col];\r\n    };\r\n    handleSortToggle=()=> {\r\n        this.setState({\r\n            isAscending: !this.state.isAscending,\r\n        });\r\n\r\n    };\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winInfo = calculateWinner(current.squares);\r\n        const winner = winInfo.winner;\r\n        const moves = history.map((item, index) => {\r\n            const [row, col] = this.convertToLocation(item.step);\r\n            const desc = index ?\r\n                'Go to move #' + index + ' (' + col + ', ' + row + ')':\r\n                'Go to game start';\r\n            return (\r\n                <li key={index}>\r\n                    <button \r\n                    className={classnames({ 'selected-item': this.state.stepNumber === index })}\r\n                    onClick={() => this.jumpTo(index)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        }\r\n        else if (winInfo.isDraw) {\r\n            status = \"Draw\";\r\n        } \r\n        else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n        if (!this.state.isAscending) {\r\n            moves.reverse();\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                        winnerLine={winInfo.line}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <button onClick={this.handleReset}>Reset</button>\r\n                    <button onClick={this.handleSortToggle}>\r\n                    {this.state.isAscending ? 'Ascending' : 'Descending'}\r\n                </button>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return {\r\n                winner: squares[a],\r\n                line: lines[i],\r\n                isDraw: false,\r\n            };\r\n        }\r\n    }\r\n    let isDraw = true;\r\n    for (let i = 0; i < squares.length; i++) {\r\n        if (squares[i] === null) {\r\n            isDraw = false;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        winner: null,\r\n        line: null,\r\n        isDraw: isDraw,\r\n    };\r\n}\r\n"],"sourceRoot":""}